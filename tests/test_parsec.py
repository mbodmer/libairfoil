import pytest

import numpy, math
import libairfoil.parsec as parsec

def debugprint(msg):
    print(msg)

def test_params_from_jfoil_string():
    jfoil_string = 'Parsec-11 [1:2:3:4:5:6:7:8:9:10:11]'
    params = parsec.Parameters()
    params.load_from_javafoil_parsec11(jfoil_string)
    debugprint(params)

    assert params.r_le == 1
    assert params.X_up == 2
    assert params.Z_up == 3
    assert params.Z_XX_up == 4
    assert params.X_lo == 5
    assert params.Z_lo == 6
    assert params.Z_XX_lo == 7
    assert params.Z_te == 8
    assert params.dZ_te == 9
    assert params.alpha_te == math.radians(10)
    assert params.beta_te == math.radians(11)


def test_jfoil_sample():
    jfoil_string = 'Parsec-11 [0,01:0,4:0,075:0,4:-0,075:-0,1:0,1:0:0:0:20]'
    params = parsec.Parameters()
    params.load_from_javafoil_parsec11(jfoil_string)
    debugprint(params)

    airfoil = parsec.Airfoil(params)

    x_up = numpy.array([1.00000000, 0.98116667, 0.95822222, 0.93150000, 0.90133333, 0.86805556,
                    0.83200000, 0.79350000, 0.75288889, 0.71050000, 0.66666667, 0.62172222,
                    0.57600000, 0.52983333, 0.48355556, 0.43750000, 0.39200000, 0.34738889,
                    0.30400000, 0.26216667, 0.22222222, 0.18450000, 0.14933333, 0.11705556,
                    0.08800000, 0.06250000, 0.04088889, 0.02350000, 0.01066667, 0.00272222,
                    0.00000000])

    x_lo = numpy.array([0.00000000, 0.00272222, 0.01066667, 0.02350000, 0.04088889, 0.06250000,
                    0.08800000, 0.11705556, 0.14933333, 0.18450000, 0.22222222, 0.26216667,
                    0.30400000, 0.34738889, 0.39200000, 0.43750000, 0.48355556, 0.52983333,
                    0.57600000, 0.62172222, 0.66666667, 0.71050000, 0.75288889, 0.79350000,
                    0.83200000, 0.86805556, 0.90133333, 0.93150000, 0.95822222, 0.98116667,
                    1.00000000])
    
    z_up_expected = numpy.array([0.00000000, 0.00365591, 0.00883517, 0.01550735, 0.02341024, 0.03208125,
                    0.04093427, 0.04936126, 0.05683477, 0.06298945, 0.06766698, 0.07091725, 0.07295802,
                    0.07410356, 0.07467861, 0.07493622, 0.07499670, 0.07482051, 0.07422028, 0.07290934,
                    0.07057594, 0.06696678, 0.06196035, 0.05561203, 0.04815822, 0.03997501, 0.03149790,
                    0.02311931, 0.01508883, 0.00744447, 0.00000000])
    
    z_lo_expected = numpy.array([0.00000000, -0.00744447, -0.01508883, -0.02311931, -0.03149790, -0.03997501,
                    -0.04815822, -0.05561203, -0.06196035, -0.06696678, -0.07057594, -0.07290934, -0.07422028,
                    -0.07482051, -0.07499670, -0.07493622, -0.07467861, -0.07410356, -0.07295802, -0.07091725,
                    -0.06766698, -0.06298945, -0.05683477, -0.04936126, -0.04093427, -0.03208125, -0.02341024,
                    -0.01550735, -0.00883517, -0.00365591, 0.00000000])
   
    z_up = airfoil.Z_up(x_up)
    assert numpy.allclose(z_up_expected, z_up)

    z_lo = airfoil.Z_lo(x_lo)
    assert numpy.allclose(z_lo_expected, z_lo)


def test_jfoil_sample2():
    jfoil_string = 'Parsec-11 [0.06:0.3:0.118:-0.9:0.118:0.118:-0.9:0:-0:0:20]'
    params = parsec.Parameters()
    params.load_from_javafoil_parsec11(jfoil_string)
    debugprint(params)

    airfoil = parsec.Airfoil(params)

    x_up = numpy.array([1.00000000, 0.98116667, 0.95822222, 0.93150000, 0.90133333, 0.86805556,
                    0.83200000, 0.79350000, 0.75288889, 0.71050000, 0.66666667, 0.62172222,
                    0.57600000, 0.52983333, 0.48355556, 0.43750000, 0.39200000, 0.34738889,
                    0.30400000, 0.26216667, 0.22222222, 0.18450000, 0.14933333, 0.11705556,
                    0.08800000, 0.06250000, 0.04088889, 0.02350000, 0.01066667, 0.00272222,
                    0.00000000])

    x_lo = numpy.array([0.00000000, 0.00272222, 0.01066667, 0.02350000, 0.04088889, 0.06250000,
                    0.08800000, 0.11705556, 0.14933333, 0.18450000, 0.22222222, 0.26216667,
                    0.30400000, 0.34738889, 0.39200000, 0.43750000, 0.48355556, 0.52983333,
                    0.57600000, 0.62172222, 0.66666667, 0.71050000, 0.75288889, 0.79350000,
                    0.83200000, 0.86805556, 0.90133333, 0.93150000, 0.95822222, 0.98116667,
                    1.00000000])

    z_up_expected = numpy.array([0.00000000, 0.00338149, 0.00766383, 0.01286919, 0.01900726, 0.02606016,
                    0.03396801, 0.04261787, 0.05183847, 0.06140240, 0.07103607, 0.08043644, 0.08929237,
                    0.09730736, 0.10422015, 0.10982008, 0.11395464, 0.11652828, 0.11749283, 0.11683180,
                    0.11454190, 0.11061590, 0.10503126, 0.09774779, 0.08871649, 0.07789917, 0.06529634,
                    0.05097849, 0.03511406, 0.01798735, 0.00000000])

    z_lo_expected = numpy.array([0.00000000, -0.01798735, -0.03511406, -0.05097849, -0.06529634, -0.07789917,
                    -0.08871649, -0.09774779, -0.10503126, -0.11061590, -0.11454190, -0.11683180, -0.11749283,
                    -0.11652828, -0.11395464, -0.10982008, -0.10422015, -0.09730736, -0.08929237, -0.08043644,
                    -0.07103607, -0.06140240, -0.05183847, -0.04261787, -0.03396801, -0.02606016, -0.01900726,
                    -0.01286919, -0.00766383, -0.00338149, 0.00000000])
    
    z_up = airfoil.Z_up(x_up)
    assert numpy.allclose(z_up_expected, z_up)

    # This test completely fails, debug session needed
    # for idx, z_up_exp_val in numpy.ndenumerate(z_up_expected):
    #     print(idx, z_up_exp_val, z_up[idx], numpy.isclose(z_up_exp_val, z_up[idx]))

    z_lo = airfoil.Z_lo(x_lo)
    assert numpy.allclose(z_lo_expected, z_lo)
